import Circus from 'circus-js'
import model from './model'

const app = new Circus()

// create some constant identities to share through the app
const ACTIVE = _ => 'ACTIVE'
const ALL = _ => 'ALL'
const COMPLETED = _ => 'COMPLETED'

// Generate a new circuit by joining three signal channels together, two of which,
// todos and filter, are generated by merging yet more signal channels together.
// A channel is a named signal and all of the channels here are generated from the
// object keys passed into the join and merge operators.
//
// Here's how the generated circuit works:
// - addTodo is exposed as an input channel on the circuit.
// - When addTodo receives a new value it propagates it to model.addToList.
// - model.addToList does its thing and returns a new value which is merged into the todos channel.
// - todos is joined to the circuit at the top level and its value becomes a circuit value.
//
// The circuit now holds the latest state which if queried now would yield:
//
//   const state = circuit.value()
//   // => {
//   //    todos: [/* output from model.addToList */],
//   //    filter: undefined,
//   //    editing: undefined
//   //  }
//
// ..but we don't want to do that. Look into ./index.js to see how the circuit is extended by
//   mapping its values over a view function.

const circuit = app.join({

  // all of the object keys here define signal channels (named signals) that can be exposed
  // and bound to in views, models etc.

  todos: app.merge({

    // the following signals are all mapped over model functions

    addTodo: model.addToList,

    editTodo: model.replaceInList,

    completeTodo: model.replaceInList,

    deleteTodo: model.removeFromList,

    clearComplete: model.purgeList,

    toggleComplete: model.toggleList
  }),

  filter: app.merge({ // the following signals always return their ids
    ACTIVE,
    COMPLETED,
    ALL
  }),

  // A pulse holds the latest value until end of signal propagation.
  // Used here to hold editing state through to the next cycle.
  editing: app.signal().pulse()
})

export default circuit

export const filters = { ALL, ACTIVE, COMPLETED }

// Also, export a simplified channel access
export const inputs = circuit.channels.todos.channels
export const filter = circuit.channels.filter.channels
export const editing = circuit.channels.editing
