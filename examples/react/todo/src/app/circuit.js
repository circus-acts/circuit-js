import Circus from 'circus-js'
import model from './model'

const app = new Circus()

// Generate a new circuit by joining three signal channels together, two of which,
// todos and filter, are generated by merging yet more signal channels together.
// A channel is a named signal and all of the channels here are generated from the
// object keys passed into the join and merge operators.
//
// Here's how the generated circuit works:
// - addTodo is exposed as an input channel on the circuit.
// - When addTodo receives a new value it passes it on to model.addToList
// - model.addToList does its thing and returns a new value which is merged into the todos channel.
// - todos is joined to the circuit at the top level and its value becomes a circuit value.
//
// The circuit now holds the latest state which if queried would yield:
//
//   const state = circuit.value() => {
//     todos: /* output from model.addToList */
//     filter: undefined
//     editing: undefined
//   }
//

const circuit = app.join({
  todos: app.merge({
    addTodo: model.addToList,
    editTodo: model.replaceInList,
    completeTodo: model.replaceInList,
    deleteTodo: model.removeFromList,
    clearComplete: model.purgeList,
    toggleComplete: model.toggleList
  }),
  filter: app.merge({
    active: false,
    completed: true,
    all: Circus.UNDEFINED
  }),
  // A pulse holds the latest value until end of signal propagation.
  // Used here to hold editing state through to the next cycle.
  editing: app.signal().pulse()
})

export default circuit

// Also, export a simplified channel access
export const inputs = circuit.channels.todos.channels
export const filter = circuit.channels.filter.channels
export const editing = circuit.channels.editing
