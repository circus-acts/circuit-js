import Circus from 'circus-js'
import model from './model'

const app = new Circus()

// create some constant ids to share through the app
const ACTIVE = 'ACTIVE'
const ALL = 'ALL'
const COMPLETED = 'COMPLETED'

export const filterType = { ALL, ACTIVE, COMPLETED }

// Todo apps generally express three stateful concepts: a list of todos, a filter
// to restrict their display and a boolean state to determine if a single todo is
// being edited.
//
// These three stateful concepts can be expressed in circuit form by defining through values and the functions that act on
// them as a circuit.
// Generate a new circuit by joining three signal channels together, two of which,
// todos and filter, are generated by merging yet more signal channels together.
// A channel is simply the keyed access to a signal and all of the channels here are
// generated from the object keys passed into the join and merge operators.

const circuit = app.join({

  todos: app.merge({
    // the following channels are all mapped over model functions
    addTodo: model.addToList,
    editTodo: model.replaceInList,
    completeTodo: model.replaceInList,
    deleteTodo: model.removeFromList,
    clearComplete: model.purgeList,
    toggleComplete: model.toggleList
  }),

  filter: app.merge({
    // the following channels always return their ids
    ALL,
    ACTIVE,
    COMPLETED
  }),

  // A pulse holds the latest value until end of signal propagation.
  // Used here to hold editing state through to the next cycle.
  editing: app.signal().pulse()
})

// Here's how the circuit works:
// - addTodo is exposed as an input channel on the circuit.
// - When addTodo receives a new value it propagates it to model.addToList.
// - model.addToList does its thing (./model.js) and returns a new list which is merged into the todos channel.
// - todos is joined to the circuit at the top level and its value becomes a circuit value.
//
// The circuit now holds the latest state which if queried now would yield:
//
//   const state = circuit.value() // =>
//   // {
//   //   todos: [/* output from model.addToList */],
//   //   filter: undefined,
//   //   editing: undefined
//   // }
//
// ..but we don't want to do this just yet.
//   Look into ./index.js to see how the circuit is extended by mapping its
//   values over a view function.

export default circuit

// Also, export a simplified channel access
export const inputs = circuit.channels.todos.channels
export const filter = circuit.channels.filter.channels
export const editing = circuit.channels.editing
